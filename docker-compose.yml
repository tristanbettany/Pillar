version: '3.8'

services:
  dns_private:
    container_name: dns_private
    build:
      context: ./containers/dns/private
    restart: 'always'
    ports:
      - 5352:8080
    dns: 1.1.1.1
    networks:
      skynet:
        ipv4_address: 10.0.10.10

  dns_public:
    container_name: dns_public
    build:
      context: ./containers/dns/public
    restart: 'always'
    ports:
      - 127.0.0.1:53:53/udp
      - 5353:8080
    dns: 1.1.1.1

  nginx:
    container_name: nginx
    build:
      context: ./containers/nginx
    restart: 'always'
    working_dir: /repos
    volumes:
      - ${REPOS_DIR:-./repos}:/repos
      - ./resources/ca:/ca
    ports:
      - 80:80
      - 443:443
    networks:
      skynet:
        ipv4_address: 10.0.10.69

  php80:
    container_name: php80
    build:
      context: ./containers/php/80
      args:
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
        - USER_ID=${USER_ID}
        - GROUP_ID=${GROUP_ID}
    restart: 'always'
    ports:
      - 1337:1337
    volumes:
      - ${REPOS_DIR:-./repos}:/repos
      - ${SSH_DIR:-~/.ssh}:/home/${USER_NAME}/.ssh
    working_dir: /repos
    user: ${USER_ID}:${GROUP_ID}
    networks:
      skynet:
        ipv4_address: 10.0.10.80
    dns: 10.0.10.10
    depends_on:
      - dns_private

  php74:
    container_name: php74
    build:
      context: ./containers/php/74
      args:
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
        - USER_ID=${USER_ID}
        - GROUP_ID=${GROUP_ID}
    restart: 'always'
    ports:
      - 1338:1338
    volumes:
      - ${REPOS_DIR:-./repos}:/repos
      - ${SSH_DIR:-~/.ssh}:/home/${USER_NAME}/.ssh
    working_dir: /repos
    user: ${USER_ID}:${GROUP_ID}
    networks:
      skynet:
        ipv4_address: 10.0.10.74
    dns: 10.0.10.10
    depends_on:
      - dns_private

  php70:
    container_name: php70
    build:
      context: ./containers/php/70
      args:
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
        - USER_ID=${USER_ID}
        - GROUP_ID=${GROUP_ID}
    restart: 'always'
    volumes:
      - ${REPOS_DIR:-./repos}:/repos
      - ${SSH_DIR:-~/.ssh}:/home/${USER_NAME}/.ssh
    working_dir: /repos
    user: ${USER_ID}:${GROUP_ID}
    networks:
      skynet:
        ipv4_address: 10.0.10.70
    dns: 10.0.10.10
    depends_on:
      - dns_private

  mysql:
    container_name: mysql
    build:
      context: ./containers/mysql
    restart: 'always'
    ports:
      - 3306:3306
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=1
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - mysql:/var/lib/mysql
    networks:
      skynet:
        ipv4_address: 10.0.10.21

  mailhog:
    container_name: mailhog
    build:
      context: ./containers/mailhog
    restart: 'always'
    ports:
      - 1025:1025
    networks:
      skynet:
        ipv4_address: 10.0.10.20

  node:
    container_name: node
    build:
      context: ./containers/node
    working_dir: /repos
    restart: 'always'
    ports:
      - 8080:8080
    user: ${USER_ID}:${GROUP_ID}
    volumes:
      - ${REPOS_DIR:-./repos}:/repos
      - ${SSH_DIR:-~/.ssh}:/home/node/.ssh
    networks:
      skynet:
        ipv4_address: 10.0.10.22

  zookeeper:
    container_name: zookeeper
    build:
      context: ./containers/zookeeper
    restart: 'always'
    ports:
      - 2181:2181
    networks:
      skynet:
        ipv4_address: 10.0.10.23
    dns: 10.0.10.10
    depends_on:
      - dns_private
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    container_name: kafka
    build:
      context: ./containers/kafka
    restart: 'always'
    ports:
      - 9092:9092
    networks:
      skynet:
        ipv4_address: 10.0.10.24
    dns: 10.0.10.10
    depends_on:
      - dns_private
      - zookeeper
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"

  akhq:
    container_name: akhq
    build:
      context: ./containers/akhq
    restart: 'always'
    networks:
      skynet:
        ipv4_address: 10.0.10.25
    dns: 10.0.10.10
    depends_on:
      - dns_private
      - kafka

  sysops:
    container_name: sysops
    build:
      context: ./containers/sysops
      args:
        - USER_NAME=${USER_NAME}
        - GROUP_NAME=${GROUP_NAME}
        - USER_ID=${USER_ID}
        - GROUP_ID=${GROUP_ID}
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    working_dir: /repos
    restart: unless-stopped
    tty: true
    user: ${USER_ID}:${GROUP_ID}
    volumes:
      - ${REPOS_DIR:-./repos}:/repos
      - ${SSH_DIR:-~/.ssh}:/home/${USER_NAME}/.ssh
    networks:
      skynet:
        ipv4_address: 10.0.10.26
    dns: 10.0.10.10
    depends_on:
      - dns_private
      - dynamodb
    links:
      - dynamodb

  s3:
    container_name: s3
    build:
      context: ./containers/s3
    environment:
      - MINIO_ROOT_USER=aws-key
      - MINIO_ROOT_PASSWORD=aws-secret
    volumes:
      - ./resources/s3:/data
    ports:
      - 9000:9000
      - 9001:9001
    networks:
      skynet:
        ipv4_address: 10.0.10.27
    dns: 10.0.10.10
    depends_on:
      - dns_private

  dynamodb:
    container_name: dynamodb
    build:
      context: ./containers/dynamodb
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data"
    volumes:
      - dynamodb-data:/home/dynamodblocal/data
    ports:
      - 8000:8000
    networks:
      skynet:
        ipv4_address: 10.0.10.28
    dns: 10.0.10.10
    depends_on:
      - dns_private

  redis:
    container_name: redis
    build:
      context: ./containers/redis
    ports:
      - 6379:6379
    networks:
      skynet:
        ipv4_address: 10.0.10.29
    dns: 10.0.10.10
    depends_on:
      - dns_private

  privoxy:
    container_name: privoxy
    build:
      context: ./containers/privoxy
    ports:
      - 8118:8118
    restart: 'unless-stopped'
    networks:
      skynet:
        ipv4_address: 10.0.10.30
    dns: 10.0.10.10
    depends_on:
      - dns_private

networks:
  skynet:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      config:
        - subnet: 10.0.10.0/24

volumes:
  mysql:
  dynamodb-data:
